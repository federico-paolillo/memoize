using System;

namespace Memoization
{
	/// <summary>
	/// A memoized Func with {{genericTypesCount}} arguments
	/// </summary>
	public sealed class Memoizer<{{genericArguments}}> : Memoizer
	{
		private readonly Func<{{genericArguments}}> func = null;

		internal Memoizer(Func<{{genericArguments}}> func)
		{
			this.func = func ?? throw new ArgumentNullException(nameof(func), "A Func delegate to memoize is required.");
		}

		public TOut Call({{genericParametersDeclaration}})
		{
			if (ArgsMatchPreviousCall({{genericParametersInvocation}})) return LastResult<TOut>();

			TOut result = func({{genericParametersInvocation}});

			StoreArguments({{genericParametersInvocation}});
			StoreResult(result);

			return result;
		}

		public static implicit operator Func<{{genericArguments}}>(Memoizer<{{genericArguments}}> fn) => fn.Call;
	}
}